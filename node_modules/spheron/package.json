{
  "name": "spheron",
  "version": "0.0.1",
  "description": "Use your javascript powers to control the Sphero by Orbotix",
  "main": "lib/index.js",
  "dependencies": {
    "serialport": "1.1.x"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.0",
    "should": "~1.2.2",
    "mocha": "~1.12.0"
  },
  "directories": {
    "example": "examples",
    "test": "tests"
  },
  "scripts": {
    "test": "mocha -r should tests --recursive -R spec"
  },
  "keywords": [
    "orbotix",
    "sphero",
    "nodebot",
    "nodebots"
  ],
  "author": {
    "name": "Michael McHugh",
    "email": "developer@yrucalling.me"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/alchemycs/spheron.git"
  },
  "license": "Simplified BSD License",
  "bugs": {
    "url": "https://github.com/alchemycs/spheron/issues"
  },
  "readme": "# Use your javascript powers to control the Sphero by Orbotix\n\n[![Build Status](https://travis-ci.org/alchemycs/spheron.png?branch=master)](https://travis-ci.org/alchemycs/spheron)\n\n## Quick Start\n\n    npm install spheron\n\nConnect your [Sphero](http://gosphero.com) to your computer via bluetooth.\n\nAdd `spheron` to your code:\n\n```javascript\nvar spheron = require('spheron');\nvar sphero = spheron.sphero();\nvar spheroPort = '/dev/cu.Sphero-RGB';\nvar COLORS = spheron.toolbelt.COLORS.BLUE;\n\nsphero.on('open', function() {\n  sphero.setRGB(color:COLORS.BLUE);\n});\n\nsphero.open(spheroPort);\n```\n\nRun that and your sphero will turn blue. You can pass hex colours such as `sphero.setRGB(0xFF00FF})` for `PURPLE`.\n\nThere are some named colours in `toolbelt.COLORS`.\n\n## Dependencies\nCommunications over bluetooth are done through [node-serialport](https://github.com/voodootikigod/node-serialport) so\nplease check there for what you need to make it work.\n\n##Examples\nThere are a few examples in the `examples` directory:\n\n* `repl.js` provides a simple REPL shell to get you started and try things out\n* `vege.js` uses the raw `.write()` method to send packets to the Sphero\n* `police.js` takes advantage of the chained API\n* See `spheron` being used in [spheron-leap](https://github.com/alchemycs/spheron-leap) controlling Sphero using Leap Motion\n\n[![](http://img.youtube.com/vi/3ratT1yCnow/0.jpg)](http://www.youtube.com/watch?v=3ratT1yCnow&feature=share&list=UUKZdVrHYWr7rVNKbs9_fXnw)\n\n\n##Direction\nI plan on creating several execution strategies so that commands can be chained, waited upon and evented in such a way\nthat it can be run interactively or converted into a `macro` or (possibly?) `orbBasic` program and saved directly to\nthe Sphero.\n\nSomething like: `sphero.startMacro().setRGB(0x00FF00).strobeLED({period:60}).wait(1000).sleep().saveMacro()`\n\nI'm also planning on implementing the API as completely as possible. [Orbotix](https://www.gosphero.com/company/) have\ndone a great job in [documenting the Sphero API](https://github.com/orbotix/DeveloperResources)!\n\n##TODO\nThe most immediate things to be done include:\n\n* Documentation!\n* Create a macro builder\n* Implement callbacks (or just stick with an event model?)\n\n## Acknowledgments\n\nThanks to:\n* Chris Williams for making [node-serialport](https://github.com/voodootikigod/node-serialport)\n* [Orbotix](https://www.gosphero.com/company/) for creating and documenting the [Sphero API](https://github.com/orbotix/DeveloperResources)\n\n## Legal Notices\nThis work is not endorsed by Orbotix.\n\nTrademarks are the property of their respective owners.\n\n## License\n\nSimplified BSD License\n",
  "readmeFilename": "README.md",
  "_id": "spheron@0.0.1",
  "_from": "spheron@>=0.0.1"
}
